#!/usr/bin/env python
# Copyright (C) : Gerhard Lausser, gerhard.lausser@consol.de

from optparse import OptionParser
import ConfigParser
import sys
import os
import shutil


sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'coshsh'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'sites', 'default', 'classes'))

from coshsh.site import Site
from datasource import Datasource, DatasourceUnavailable
from coshsh.log import logger


class GeneratorMessage(object):
    def __init__(self, message):
        self.message = message

class WarningMessage(GeneratorMessage):
    pass

class CriticalMessage(GeneratorMessage):
    pass

class OkMessage(GeneratorMessage):
    pass

class Coshsh(object):

    base_dir = os.path.dirname(os.path.dirname(__file__))
    messages = []

    def __init__(self):
        self.sites = {}
        self.datasources = {}


    def add_site(self, *args, **kwargs):
        try:
            site = Site(**kwargs)
            for ds in kwargs["datasources"].split(","):
                if ds in self.datasources: 
                    try:
                        self.datasources[ds].open()
                        self.datasources[ds].set_site(site.name)
                        site.datasources.append(self.datasources[ds])
                    except DatasourceUnavailable as e:
                        pass
            self.sites[kwargs["name"]] = site
        except Exception, e:
            print e
        pass


    def add_datasource(self, *args, **kwargs):
        try:
            if kwargs["type"] == "valuemation":
                from datasource import Valuemation
                datasource = Valuemation(**kwargs)
            elif kwargs["type"] == "csv":
                from datasource import CsvFile
                datasource = CsvFile(**kwargs)
            elif kwargs["type"] == "bmwcmdb":
                from datasource import BmwCmdb
                datasource = BmwCmdb(**kwargs)
            else:
                print "unknown datasource", kwargs
            self.datasources[kwargs["name"]] = datasource
        except Exception as e:
            print "add_datasource", e
        pass


    def run(self):
        for site in self.sites.values():
            try:
                site.cleanup_target_dir()
            except Exception:
                logger.info("skipping site %s" % site.name)
            else:
                site.prepare_target_dir()
                site.collect()
                site.render()
                site.output()


if __name__ == '__main__':
    VERSION = "1.0"


    parser = OptionParser(
        "%prog [options] --config configfile [--config additional_config_file]",
        version="%prog " + VERSION)
    parser.add_option('--config', action='store',
                      dest="config_file",
                      help='Config file')
    parser.add_option('--site', action='store',
                      dest="default_site",
                      help="Only create a config for <site>")

    opts, args = parser.parse_args()
    generator = Coshsh()
    if opts.config_file:
        config = ConfigParser.ConfigParser()
        config.read(opts.config_file)
        if config._sections == {}:
            print "Bad or missing config file : %s " % opts.config_file
            sys.exit(2)
            
        for ds in [section for section in config.sections() if section.startswith('datasource_')]:
            generator.add_datasource(name=ds.replace("datasource_", "", 1), **dict(config.items(ds)))

        sites = []
        if opts.default_site:
            sites = [opts.default_site.lower()]
        else:
            sites = [s.strip().lower() for s in config.get("defaults", "sites").split(",")]
        for site in [section for section in config.sections() if section.startswith('site_')]:
            if site.replace("site_", "", 1).lower() in sites:
                generator.add_site(name=site.replace("site_", "", 1).lower(), **dict(config.items(site)))

    if args:
        parser.error("Does not accept any argument. Use option -c/--config")
    if len(generator.datasources) == 0:
       parser.error("None of the configured datasources was found")

    # nagios_dir config option sets an alternative target
    # and may be used to replace Coshsh.base_dir
    generator.run()

