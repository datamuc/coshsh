#!/usr/bin/env python
# Copyright (C) : Gerhard Lausser, gerhard.lausser@consol.de

from optparse import OptionParser
import ConfigParser
import sys
import os
import shutil


sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'coshsh'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'sites', 'default', 'classes'))

from coshsh.site import Site
from datasource import Datasource, DatasourceUnavailable
from coshsh.log import logger
from coshsh.generator import Generator


class GeneratorMessage(object):
    def __init__(self, message):
        self.message = message

class WarningMessage(GeneratorMessage):
    pass

class CriticalMessage(GeneratorMessage):
    pass

class OkMessage(GeneratorMessage):
    pass


if __name__ == '__main__':
    VERSION = "1.0"


    parser = OptionParser(
        "%prog [options] --config configfile [--config additional_config_file]",
        version="%prog " + VERSION)
    parser.add_option('--config', action='store',
                      dest="config_file",
                      help='Config file')
    parser.add_option('--site', action='store',
                      dest="default_site",
                      help="Only create a config for <site>")

    opts, args = parser.parse_args()
    generator = Generator()
    if opts.config_file:
        config = ConfigParser.ConfigParser()
        config.read(opts.config_file)
        if config._sections == {}:
            print "Bad or missing config file : %s " % opts.config_file
            sys.exit(2)
            
        for ds in [section for section in config.sections() if section.startswith('datasource_')]:
            generator.add_datasource(name=ds.replace("datasource_", "", 1), **dict(config.items(ds)))

        sites = []
        if opts.default_site:
            sites = [opts.default_site.lower()]
        else:
            sites = [s.strip().lower() for s in config.get("defaults", "sites").split(",")]
        for site in [section for section in config.sections() if section.startswith('site_')]:
            if site.replace("site_", "", 1).lower() in sites:
                generator.add_site(name=site.replace("site_", "", 1).lower(), **dict(config.items(site)))

    if args:
        parser.error("Does not accept any argument. Use option -c/--config")
    if len(generator.datasources) == 0:
       parser.error("None of the configured datasources was found")

    # nagios_dir config option sets an alternative target
    # and may be used to replace Coshsh.base_dir
    generator.run()

