#!/usr/bin/env python3
#-*- coding: utf-8 -*-
#
# This file belongs to coshsh.
# Copyright Gerhard Lausser.
# This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

import sys
try:
    import imp
    imp.reload(sys)
except Exception:
    importlib.reload(sys)

from optparse import OptionParser
import sys
import os
import re
import shutil
from tempfile import gettempdir
from logging import INFO, DEBUG, getLogger

sys.dont_write_bytecode = True
try:
    import coshsh
except Exception:
    if 'COSHSH_HOME' in os.environ:
        coshsh_home = os.environ['COSHSH_HOME']
    else:
        coshsh_home = os.path.join(os.path.dirname(__file__), '..')
        os.environ['COSHSH_HOME'] = coshsh_home
    sys.path.append(coshsh_home)
    try:
        import coshsh
    except Exception:
        print("Could not load package coshsh. Check your PYTHONPATH")
        sys.exit(3)

from coshsh.util import setup_logging
from coshsh.generator import Generator
from coshsh.recipe import Recipe
from coshsh.util import substenv
from coshsh.configparser import CoshshConfigParser


class GeneratorMessage(object):
    def __init__(self, message):
        self.message = message

class WarningMessage(GeneratorMessage):
    pass

class CriticalMessage(GeneratorMessage):
    pass

class OkMessage(GeneratorMessage):
    pass


if __name__ == '__main__':
    VERSION = "1.0"


    parser = OptionParser(
        "%prog [options] --cookbook cookbookfile [--recipe recipe]",
        version="%prog " + VERSION)
    parser.add_option('--cookbook', action='append',
                      dest="cookbook_files",
                      help='One or more Config files')
    parser.add_option('--recipe', action='store',
                      dest="default_recipe",
                      help="Cook a configuration following <recipe>")
    parser.add_option('--debug', action='store_const',
                      const="debug",
                      default="info",
                      dest="default_log_level",
                      help="Output additional messages on stdout")
    parser.add_option('--force', action='store_true',
                      default=False,
                      dest="force",
                      help="Force datasource to be read")
    parser.add_option('--safe-output', action='store_true',
                      default=False,
                      dest="safe_output",
                      help="Do not commit when hosts disappeared")

    opts, args = parser.parse_args()
    generator = Generator()
    if opts.cookbook_files:
        generator.read_cookbook(opts.cookbook_files, opts.default_recipe, opts.default_log_level, opts.force, opts.safe_output)
    else:
        parser.error("Use option -c/--cookbook")
    if args:
        parser.error("Does not accept any argument. Use option -c/--cookbook")

    generator.run()

