#!/usr/bin/env python
# Copyright (C) : Gerhard Lausser, gerhard.lausser@consol.de

from optparse import OptionParser
import ConfigParser
import sys
import os
import shutil
from subprocess import Popen, PIPE, STDOUT
import time

sys.dont_write_bytecode = True
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'coshsh'))

from log import logger
from generator import Generator
from recipe import Recipe
from datasource import Datasource, DatasourceNotAvailable


class GeneratorMessage(object):
    def __init__(self, message):
        self.message = message

class WarningMessage(GeneratorMessage):
    pass

class CriticalMessage(GeneratorMessage):
    pass

class OkMessage(GeneratorMessage):
    pass


if __name__ == '__main__':
    VERSION = "1.0"


    parser = OptionParser(
        "%prog [options] --cookbook cookbookfile [--recipe recipe]",
        version="%prog " + VERSION)
    parser.add_option('--cookbook', action='store',
                      dest="cookbook_file",
                      help='Config file')
    parser.add_option('--recipe', action='store',
                      dest="default_recipe",
                      help="Only create a cookbook for <recipe>")
    parser.add_option('--template', action='store',
                      dest="template_name",
                      help="Build a template hierarchy for this service profile")

    opts, args = parser.parse_args()
    generator = Generator()
    if opts.cookbook_file:
        cookbook = ConfigParser.ConfigParser()
        cookbook.read(opts.cookbook_file)
        if cookbook._sections == {}:
            print "Bad or missing cookbook file : %s " % opts.cookbook_file
            sys.exit(2)
            
        recipes = []
        if not opts.template_name:
            parser.error("Which template hierarchy should i create? Use --template")
        if opts.default_recipe:
            recipes = [opts.default_recipe.lower()]
        else:
            try:
                recipes = [s.strip().lower() for s in cookbook.get("defaults", "recipes").split(",")]
            except Exception:
                recipes = []
        print "recipes is", recipes
        for recipe in [section for section in cookbook.sections() if section.startswith('recipe_')]:
            if recipe.replace("recipe_", "", 1).lower() in recipes:
                generator.add_recipe(name=recipe.replace("recipe_", "", 1), **dict(cookbook.items(recipe)))
    else:
        parser.error("Please use option -c/--cookbook")
    if args:
        parser.error("Does not accept any argument. Use option -c/--cookbook")

    for recipe in generator.recipes.values():
        #recipe.collect()
        basedir = recipe.objects_dir + "/static/service_templates"
        if os.path.exists(recipe.objects_dir):
            if not os.path.exists(recipe.objects_dir + "/static"):
                os.mkdir(recipe.objects_dir + "/static")
            if not os.path.exists(recipe.objects_dir + "/static/service_templates"):
                os.mkdir(recipe.objects_dir + "/static/service_templates")

        template = opts.template_name
        created = False
        while template.find("_") != -1:
            template, sep, tail = template.rpartition("_")
            output = "define service {\n  name %s\n  use %s\n  register 0\n}\n" % (template + sep + tail, template)
            template_file = os.path.join(basedir, template + sep + tail + ".cfg")
            if not os.path.exists(template_file):
                logger.info("create %s" % template_file)
                with open(template_file, "w") as f:
                    f.write(output)
                    created = True
            else:
                logger.info("confirm %s" % template_file)
        if created and os.path.exists(recipe.objects_dir + '/static/.git'):
            save_dir = os.getcwd()
            os.chdir(recipe.objects_dir + '/static')
            process = Popen(["git", "add", "."], stdout=PIPE, stderr=STDOUT)
            output, unused_err = process.communicate()
            retcode = process.poll()
            commitmsg = time.strftime("%Y-%m-%d-%H-%M-%S") + " create template %s" % (template, )
            process = Popen(["git", "commit", "-a", "-m", commitmsg], stdout=PIPE, stderr=STDOUT)
            output, unused_err = process.communicate()
            retcode = process.poll()
            print output
            os.chdir(save_dir)

